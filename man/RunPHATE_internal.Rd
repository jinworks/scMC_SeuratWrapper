% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualization.R
\name{RunPHATE_internal}
\alias{RunPHATE_internal}
\title{Run PHATE from a data matrix}
\usage{
RunPHATE_internal(
  object,
  assay = NULL,
  n.components = 2L,
  knn = 20L,
  decay = 40L,
  n.landmark = 2000L,
  gamma = 1,
  t = "auto",
  mds.solver = "sgd",
  knn.dist.method = "euclidean",
  mds.method = "metric",
  mds.dist.method = "euclidean",
  t.max = 100,
  npca = 40,
  plot.optimal.t = FALSE,
  verbose = 1,
  n.jobs = 1,
  seed.use = 42,
  reduction.key = "PHATE_",
  k = NULL,
  alpha = NULL,
  ...
)
}
\arguments{
\item{object}{matrix (n_samples, n_dimensions) 2 dimensional input data array with n_samples samples and n_dimensions dimensions.
If knn.dist.method is 'precomputed', data is treated as a (n_samples, n_samples) distance or affinity matrix}

\item{assay}{Assay to pull data for when using \code{features}}

\item{n.components}{Total number of dimensions to embed in PHATE.}

\item{knn}{int, optional, default: 5
number of nearest neighbors on which to build kernel}

\item{decay}{int, optional, default: 40
sets decay rate of kernel tails.
If NA, alpha decaying kernel is not used}

\item{n.landmark}{int, optional, default: 2000
number of landmarks to use in fast PHATE}

\item{gamma}{float, optional, default: 1
Informational distance constant between -1 and 1.
`gamma=1` gives the PHATE log potential, `gamma=0` gives
a square root potential.}

\item{t}{int, optional, default: 'auto'
power to which the diffusion operator is powered
sets the level of diffusion}

\item{mds.solver}{{'sgd', 'smacof'}, optional, default: 'sgd'
which solver to use for metric MDS. SGD is substantially faster,
but produces slightly less optimal results. Note that SMACOF was used
for all figures in the PHATE paper.}

\item{knn.dist.method}{string, optional, default: 'euclidean'.
recommended values: 'euclidean', 'cosine', 'precomputed'
Any metric from `scipy.spatial.distance` can be used
distance metric for building kNN graph. If 'precomputed',
`data` should be an n_samples x n_samples distance or
affinity matrix. Distance matrices are assumed to have zeros
down the diagonal, while affinity matrices are assumed to have
non-zero values down the diagonal. This is detected automatically using
`data[0,0]`. You can override this detection with
`knn.dist.method='precomputed_distance'` or
`knn.dist.method='precomputed_affinity'`.}

\item{mds.method}{string, optional, default: 'metric'
choose from 'classic', 'metric', and 'nonmetric'
which MDS algorithm is used for dimensionality reduction}

\item{mds.dist.method}{string, optional, default: 'euclidean'
recommended values: 'euclidean' and 'cosine'}

\item{t.max}{int, optional, default: 100.
Maximum value of t to test for automatic t selection.}

\item{npca}{int, optional, default: 100
Number of principal components to use for calculating
neighborhoods. For extremely large datasets, using
n_pca < 20 allows neighborhoods to be calculated in
log(n_samples) time.}

\item{plot.optimal.t}{boolean, optional, default: FALSE
If TRUE, produce a plot showing the Von Neumann Entropy
curve for automatic t selection.}

\item{verbose}{`int` or `boolean`, optional (default : 1)
If `TRUE` or `> 0`, print verbose updates.}

\item{n.jobs}{`int`, optional (default: 1)
The number of jobs to use for the computation.
If -1 all CPUs are used. If 1 is given, no parallel computing code is
used at all, which is useful for debugging.
For n_jobs below -1, (n.cpus + 1 + n.jobs) are used. Thus for
n_jobs = -2, all CPUs but one are used}

\item{seed.use}{int or `NA`, random state (default: `42`)}

\item{reduction.key}{dimensional reduction key, specifies the string before
the number for the dimension names. PHATE_ by default}

\item{k}{Deprecated. Use `knn`.}

\item{alpha}{Deprecated. Use `decay`.}

\item{...}{other parameters to phateR::phate}
}
\description{
Run PHATE from a data matrix
}
